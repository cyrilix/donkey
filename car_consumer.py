#! /usr/bin/env python
"""
Scripts to consume amqp messages generated by donkey car.

Usage:
car_consumer.py (-u USERID | --userid=USERID) --password=PASSWORD --hostname=HOSTNAME --tub_path_root=TUB_PATH_ROOT [--queue=QUEUE]

Options:
-h --help                                       Show this screen.
-u USERID --userid=USERID                     Amqp user
-p PASSWORD --password=PASSWORD                 Amqp password
-H HOSTNAME --hostname=HOSTNAME                 Server host
-t TUB_PATH_ROOT --tub_path_root=TUB_PATH_ROOT  Path where to write messages
-q QUEUE --queue=QUEUE                          Queue name [default: fous_du_volant]

"""
import logging
import os
from os import path

from amqpy import Connection, AbstractConsumer, Message
from docopt import docopt

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def run_consumer(hostname, queue, userid, password, tub_path_root):
    connection = Connection(host=hostname, userid=userid, password=password)
    channel = connection.channel()
    consumer = Consumer(queue=queue, channel=channel, tub_path_root=tub_path_root)
    consumer.declare()
    while True:
        connection.drain_events(timeout=None)


class Consumer(AbstractConsumer):

    def __init__(self, channel, queue, tub_path_root):
        super().__init__(channel, queue)
        self._tub_path_root = tub_path_root

    def run(self, msg: Message):
        logger.debug('Received a message: %s', msg.properties)

        try:
            tub_path = self._mkdir_tub(msg.application_headers)
            file_name = path.join(tub_path, msg.application_headers['name'])

            self._write_content(file_name, msg)

            msg.ack()
        except:
            logging.exception("Unexpected error")
            msg.reject(requeue=True)

    @staticmethod
    def _write_content(file_name, msg):
        if msg.properties['content_type'] == "application/json":
            logger.debug('Content: %s', msg.body)
            with open(file_name, encoding=msg.properties['content_encoding'], mode='wt') as json_file:
                json_file.write(msg.body)

        if msg.properties['content_type'] == "image/jpeg":
            with open(file_name, mode='wb') as image_file:
                image_file.write(msg.body)

    def _mkdir_tub(self, application_headers):
        tub_path = path.join(self._tub_path_root, application_headers['tub_name'])
        os.makedirs(tub_path, exist_ok=True)
        return tub_path


if __name__ == '__main__':
    args = docopt(__doc__)
    run_consumer(hostname=args['--hostname'],
                 queue=args['--queue'],
                 userid=args['--userid'],
                 password=args['--password'],
                 tub_path_root=args['--tub_path_root']
                 )
